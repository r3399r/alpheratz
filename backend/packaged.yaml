AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: alpheratz deployment cloudformation script
Globals:
  Function:
    Timeout: 30
Parameters:
  Project:
    Type: String
  TargetEnvr:
    Type: String
Conditions:
  IsProd:
    Fn::Equals:
    - Ref: TargetEnvr
    - prod
Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName:
        Fn::Sub: ${Project}-${TargetEnvr}-lambda-execution-role
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Fn::Sub: ${TargetEnvr}
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.1
        info:
          version: '2020-01-06T07:45:41Z'
          title:
            Fn::Sub: ${Project}-${TargetEnvr}-api
        paths:
          /api/chat:
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:278497686406:function:${Project}-${TargetEnvr}-lambda/invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws
        definitions:
          Empty:
            type: object
            title: Empty Schema
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
      - arm64
      Handler: index.handler
      Runtime: nodejs18.x
      FunctionName:
        Fn::Sub: ${Project}-${TargetEnvr}-lambda
      Role:
        Fn::GetAtt:
        - ExecutionRole
        - Arn
      CodeUri: s3://y-cf-midway-singapore/745a42d86579edc6306abfd60db61c3f
      MemorySize: 128
      Environment:
        Variables:
          PROJECT:
            Fn::Sub: ${Project}
          ENVR:
            Fn::Sub: ${TargetEnvr}
  InvokePermissionLambda:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessApi
    - LambdaFunction
    Properties:
      FunctionName:
        Fn::Sub: ${Project}-${TargetEnvr}-lambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - ServerlessApi
    - S3Bucket
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::Select:
            - 1
            - Fn::Split:
              - //
              - Fn::GetAtt:
                - S3Bucket
                - WebsiteURL
          Id: S3-hosted-website-ID
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        - DomainName:
            Fn::Sub: ${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com
          Id:
            Fn::Sub: ${Project}-${TargetEnvr}-ApiEndpoint-ID
          OriginPath:
            Fn::Sub: /${TargetEnvr}
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginKeepaliveTimeout: 5
            OriginProtocolPolicy: https-only
        Enabled: 'true'
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
          TargetOriginId: S3-hosted-website-ID
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        CacheBehaviors:
        - PathPattern: /api/*
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
          ForwardedValues:
            Headers:
            - Authorization
            - Accept
            QueryString: true
          TargetOriginId:
            Fn::Sub: ${Project}-${TargetEnvr}-ApiEndpoint-ID
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        PriceClass: PriceClass_200
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${Project}-${TargetEnvr}
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
    - S3Bucket
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Fn::Join:
        - ''
        - - '{ "Version": "2012-10-17", "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [ { "Sid": "Allow-OAI-Access-To-Bucket", "Effect": "Allow",
            "Principal": "*", "Action": "s3:GetObject", "Resource": "'
          - Fn::GetAtt:
            - S3Bucket
            - Arn
          - /*" } ] }
